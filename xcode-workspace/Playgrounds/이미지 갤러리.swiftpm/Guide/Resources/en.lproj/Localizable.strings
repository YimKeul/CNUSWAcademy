bplist00ﬂÄ	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÇÜÇÇáàâäãÇåçéèêëíìîïñóÇòÇÇôöõúÇùûÇü†°¢Ç£§•Ç¶ÇßÇÇ®©™´¨ÇÇÇ≠ÆØÇ∞Ç±≤≥¥µ∂Ç∑∏πÇÇÇ∫ªºÇΩÇæø¿¡¬Ç√ÇÇƒÇÇ≈∆Ç«»…ÇÇ ÀÃÕŒÇœ–ÇÇÇÇ—“ÇÇ”ÇùÇ‘ù_UGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page27..Paragraph38_QGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page12..title_XGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Page33..CodeBlock0_OGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Paragraph20_YGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Page33..Paragraph46_MGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page20..title_SGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page4..Paragraph11_HGuideBook..Guide0..StepImage Gallery..TaskGroup0..Taskitem..Page2..title_MGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page25..title_WGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page16..Paragraph25_[GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page41..CodeBlock4_WGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page14..Paragraph23_WGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page12..Paragraph21_SGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page21..Paragraph31_MGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page24..title_YGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Page34..Paragraph47_SGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page24..Paragraph34_YGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Page34..Paragraph48_SGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page19..Paragraph29_NGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..title_[GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page36..Paragraph52_`GuideBook..Guide0..StepImage Gallery..LearningCenterContent..GuideButtonStart Walkthrough..title_[GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page36..Paragraph51_UGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page29..Paragraph40_YGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Page32..Paragraph45_YGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Page32..Paragraph44_UGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page26..Paragraph37_MGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page5..title_UGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page30..Paragraph41_SGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Page34..title_OGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page31..title_[GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page37..Paragraph53_WGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskphotoGridApp..Page10..Paragraph18_GGuideBook..Guide0..StepImage Gallery..LearningCenterContent..Paragraph1_OGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskphotoGridApp..Paragraph16_MGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page4..title_+GuideBook..Guide0..StepImage Gallery..title_GGuideBook..Guide0..StepImage Gallery..LearningCenterContent..Paragraph3_VGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page41..title_UGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page31..Paragraph42_SGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page7..Paragraph14_MGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..title_[GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page40..CodeBlock3_OGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page29..title_7GuideBook..Guide0..StepImage Gallery..TaskGroup0..title_SGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page5..Paragraph12_TGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Paragraph55_MGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page8..title_MGuideBook..Guide0..StepImage Gallery..TaskGroup0..Taskitem..Page1..Paragraph7_OGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page30..title_\GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page42..Paragraph62_VGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page39..title_HGuideBook..Guide0..StepImage Gallery..TaskGroup0..Taskitem..Page1..title_SGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Paragraph49_SGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page22..Paragraph32_SGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page25..Paragraph35_MGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Paragraph36_FGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..title_MGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page23..title_OGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page28..title_SGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Page32..title_WGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page17..Paragraph26_2GuideBook..WelcomeMessageImage Gallery..Paragraph0_WGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page15..Paragraph24_MGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page22..title_KGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Paragraph27_PGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskphotoGridApp..Page9..title_WGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page13..Paragraph22_[GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page38..Paragraph54_KGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Paragraph9_FGuideBook..Guide0..StepImage Gallery..TaskGroup0..Taskitem..Paragraph5_ZGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page37..CodeBlock2_AGuideBook..Guide0..StepImage Gallery..TaskGroup0..Taskitem..title_MGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page3..title_SGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page8..Paragraph15_\GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page41..Paragraph61_GGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..title_QGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskphotoGridApp..Page11..title_MGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page19..title_UGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page37..title_\GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page41..Paragraph60_\GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page39..Paragraph57_SGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page3..Paragraph10_OGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page27..title_SGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page6..Paragraph13_QGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskphotoGridApp..Page10..title_fGuideBook..Guide0..StepImage Gallery..LearningCenterContent..GuideButtonStart Walkthrough..description_ZGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page36..CodeBlock1_\GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page39..Paragraph56_WGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskphotoGridApp..Page11..Paragraph19_KGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..title_QGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page17..title_IGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..title_UGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page35..title_SGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Page33..title_MGuideBook..Guide0..StepImage Gallery..TaskGroup0..Taskitem..Page0..Paragraph6_MGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page18..title_MGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page7..title_7GuideBook..Guide0..StepImage Gallery..TaskGroup2..title_GGuideBook..Guide0..StepImage Gallery..LearningCenterContent..Paragraph2_UGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page38..title_VGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskphotoGridApp..Page9..Paragraph17_\GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page40..Paragraph59_SGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page20..Paragraph30_QGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page16..title_VGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page40..title_GGuideBook..Guide0..StepImage Gallery..LearningCenterContent..Paragraph4_[GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page35..Paragraph50_MGuideBook..Guide0..StepImage Gallery..TaskGroup0..Taskitem..Page2..Paragraph8_SGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page18..Paragraph28_SGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page23..Paragraph33_HGuideBook..Guide0..StepImage Gallery..TaskGroup0..Taskitem..Page0..title_UGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page28..Paragraph39_\GuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page40..Paragraph58_VGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskgridViewFavorites..Page42..title_UGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskdetailViewToggle..Page36..title_QGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page15..title_MGuideBook..Guide0..StepImage Gallery..TaskGroup0..TaskdataModel..Page6..title_QGuideBook..Guide0..StepImage Gallery..TaskGroup2..TaskisFavoriteItem..Paragraph43_EGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..title_QGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page14..title_OGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskaddAnImage..Page26..title_7GuideBook..Guide0..StepImage Gallery..TaskGroup1..title_MGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridView..Page21..title_GuideBook..title_QGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskgridItemView..Page13..title_IGuideBook..Guide0..StepImage Gallery..TaskGroup1..TaskphotoGridApp..title_-GuideBook..WelcomeMessageImage Gallery..titleo≤ T o   e d i t   y o u r   p h o t o   g r i d ,   y o u  l l   u s e   t h e   [ s t a t e   v a l u e ] ( g l o s s a r y : / / s t a t e % 2 0 v a l u e )   ` i s E d i t i n g ` .   Y o u  l l   a d d   a   R e m o v e   b u t t o n   ( x )   o n   t o p   o f   e a c h   i m a g e   w h e n   t h e   v a l u e   t o g g l e s   t o   ` t r u e ` .P_```var isFavorite = false
```_∞Find out how to load an image [asynchronously](glossary://asynchronous%20process) from a URL using [AsyncImage](doc://com.apple.documentation/documentation/swiftui/asyncimage).oQ F i r s t ,   y o u  l l   a d d   a   p r o p e r t y   t o   ` I t e m `   s o   t h e   a p p   c a n   t r a c k   t h e   f a v o r i t e d   i m a g e s :_-`DataModel` publishes an array of `item` values, each of which correlates to an image in the grid. Because the code marks this value as `@Published`, any time you add or delete an `Item` from this array, SwiftUI updates the grid view (and any other views that use this value) to reflect those changes.oB ` A s y n c I m a g e `   c o n t a i n s   a   ` c o n t e n t `   [ c l o s u r e ] ( g l o s s a r y : / / c l o s u r e )   t h a t   p r o v i d e s   a n   [ i n s t a n c e ] ( g l o s s a r y : / / i n s t a n c e )   o f   a   S w i f t U I   ` I m a g e ` .   Y o u  l l   u s e   t h i s   i n s t a n c e   t o   c r e a t e   t h e   i m a g e   v i e w .   Y o u  l l   a d d   t h e   ` . r e s i z a b l e `   a n d   ` . a s p e c t R a t i o ( c o n t e n t M o d e :   . f i l l ) `   m o d i f i e r s   t o   s c a l e   t h e   i m a g e   t o   f i l l   t h e   a v a i l a b l e   s p a c e   o f   t h e   v i e w ._…```if item.isFavorite {
   Image(systemName: "heart.fill")
       .foregroundColor(.white)
       .shadow(color: .black.opacity(0.3), radius: 5)
       .font(.callout)
       .offset(x: 4, y: -4)
}
```oÍ I n   t h e   ` b o d y `   o f   y o u r   ` G r i d I t e m V i e w ` ,   y o u  l l   c r e a t e   y o u r   i m a g e   v i e w .   B e c a u s e   y o u  l l   h a v e   a   c o n d i t i o n a l   e d i t i n g   U I   o v e r l a i d   o n   t o p   o f   y o u r   i m a g e ,   w r a p   t h e   i m a g e   i n   a   [ Z S t a c k ] ( d o c : / / c o m . a p p l e . d o c u m e n t a t i o n / d o c u m e n t a t i o n / s w i f t u i / z s t a c k ) ._z`GridItemView` represents a single item of your grid, an image view that displays the photo defined by an `Item` instance._To create the grid, nest a [LazyVGrid](doc://com.apple.documentation/documentation/swiftui/lazyvgrid) inside of a [ScrollView](doc://com.apple.documentation/documentation/swiftui/scrollview) to allow the content of the grid to scroll vertically, if necessary._dNow you can change the value of `isFavorite` on any of your `Item` [instances](glossary://instance)._ΩTo simplify the code in `GridView`, generate each view of the grid using a `GridItemView`, which handles all of the asynchronous image loading as well as transitions between editing states.o` N e x t ,   y o u  l l   c r e a t e   a   b u t t o n   t h a t   a l l o w s   y o u   t o   c h a n g e   t h e   ` i s F a v o r i t e `   v a l u e   f r o m   ` D e t a i l V i e w ` .o T o   a c c e s s   t h e   a p p  s   ` d a t a M o d e l ` ,   y o u   d e f i n e   a n   ` @ E n v i r o n m e n t O b j e c t `   o f   t y p e   ` D a t a M o d e l ` ,   w h i c h   g i v e s   y o u   a c c e s s   t o   t h e   [ e n v i r o n m e n t   o b j e c t ] ( g l o s s a r y : / / e n v i r o n m e n t % 2 0 o b j e c t )   p a s s e d   i n t o   t h e   t o p - l e v e l   v i e w   o f   t h e   [ v i e w   h i e r a r c h y ] ( g l o s s a r y : / / v i e w % 2 0 h i e r a r c h y )   i n   ` I m a g e G a l l e r y A p p . s w i f t ` ._Show your favoritesoc T h i s   d i s p l a y s   a   f u l l   h e a r t   i f   s o m e o n e   f a v o r i t e s   t h e   i m a g e ,   a n d   t h e   o u t l i n e   o f   a   h e a r t   i f   i t   h a s n  t ._Start Walkthrough_-Add the `Button` below the `AsyncImage` view.oQ W h e n   ` i s E d i t i n g `   i s   ` t r u e ` ,   y o u  l l   s h o w   a   R e m o v e   b u t t o n   ( x )   o n   t o p   o f   t h e   i m a g e s .oá I f   y o u  r e   f e e l i n g   c o n f i d e n t ,   g o   a h e a d   a n d   t r y   a d d i n g   t h i s   f u n c t i o n a l i t y   o n   y o u r   o w n ,   u s i n g   t h e   f o l l o w i n g   i n s t r u c t i o n s   i f   y o u   g e t   s t u c k ._ÜWhat if you wanted the ability to favorite the best images in your gallery? Can you think of how you might go about implementing that?o§ T o   a d d   a   n e w   p h o t o   t o   t h e   g r i d ,   y o u  l l   u s e   t h e   s t a t e   v a l u e   ` i s A d d i n g P h o t o ` .   Y o u  l l   t o g g l e   t h i s   v a l u e   t o   ` t r u e `   w h e n e v e r   y o u   p r e s s   t h e   A d d   b u t t o n   ( + )   i n   t h e   t o o l b a r .o W h e n   a   p e r s o n   t a p s   t h e   R e m o v e   b u t t o n   ( x ) ,   t h e   c o d e   r e m o v e s   t h e   c u r r e n t   i t e m   f r o m   ` d a t a M o d e l . i t e m s ` .   B e c a u s e   ` d a t a M o d e l . i t e m s `   i s   a   [ p u b l i s h e d   v a l u e ] ( g l o s s a r y : / / p u b l i s h e d % 2 0 v a l u e ) ,   t h i s   c h a n g e   c a u s e s   S w i f t U I   t o   u p d a t e   t h e   g r i d   v i e w  s   a p p e a r a n c e   a n d   r e m o v e   t h e   i t e m ._TTo make the button look a bit more presentable, you can add the following modifiers:_ñTo create `dataModel` as a [state object](glossary://state%20object), apply the `@StateObject` [property wrapper](glossary://property%20wrapper) and provide an initial value that conforms to the `ObservableObject` protocol. SwiftUI manages storage for a state object, and updates all of the [subviews](glossary://subview) that use the value when the [published values](glossary://published%20value) change.^![](intro.png)_jLearn how the app passes photo data from `DataModel` to its [view hierarchy](glossary://view%20hierarchy).]Image Gallery_îThe Image Gallery app is an extension of two simpler implementations: [Organizing with Grids](x-com-apple-playgrounds://projects?contentId=com.apple.playgrounds.organizingwithgrids) and [Editing Grids](x-com-apple-playgrounds://projects?contentId=com.apple.playgrounds.editinggrids). This walkthrough focuses on solving some common issues after your grid displays images, instead of shapes or SF Symbols._ıWhen `isAddingPhoto` is `true`, a sheet displays a modal `PhotoPicker` view. In `PhotoPicker`, selecting a new photo adds the corresponding `item` to `DataModel.items`. This causes SwiftUI to update the grid view and add the corresponding image._ª`DataModel` provides methods for adding and removing elements from `items`. `addItem` adds a new element at the first index of the array so you can see when new images appear in the view._Toggle a favorited item_]```.overlay(alignment: .bottomLeading) {
    //#-learning-code-snippet(checkIsFavorite)
}
```_Modeling the gridoP W h e n   y o u   [ i n i t i a l i z e ] ( g l o s s a r y : / / i n i t i a l i z a t i o n )   t h e   ` D a t a M o d e l ` ,   i t   s e a r c h e s   t h e   D o c u m e n t s   d i r e c t o r y   f o r   a n y   i m a g e s   y o u  v e   a d d e d ,   g a t h e r i n g   t h e i r   c o r r e s p o n d i n g   U R L s   a n d   a p p e n d i n g   t h e m   t o   t h e   ` i t e m s `   a r r a y .   Y o u r   a p p   s t o r e s   d a t a   l o c a l l y   i n   t h i s   d i r e c t o r y ,   s o   s e a r c h i n g   h e r e   a l l o w s   y o u   t o   d i s p l a y   a n y   i m a g e s   y o u   a d d e d   w h i l e   u s i n g   t h e   a p p ._1Display a heart image over your favorited images._mYour `Item` contains an `id` [property](glossary://property) that SwiftUI uses to uniquely identify the view._åNow, try favoriting some images and see how the `GridView` changes. Keep tweaking your implementation until it looks exactly as you want it._7Add the ability to toggle a favorite from `DetailView`.o‘ Y o u r   [ F o r E a c h ] ( d o c : / / c o m . a p p l e . d o c u m e n t a t i o n / d o c u m e n t a t i o n / s w i f t u i / f o r e a c h )   l o o p   i t e r a t e s   t h r o u g h   ` d a t a M o d e l . i t e m s ` ,   a n d   c r e a t e s   a   ` G r i d I t e m V i e w `   b a s e d   u p o n   e a c h   ` i t e m `   v a l u e   i n   t h e   a r r a y .   B e c a u s e   e a c h   ` i t e m `   i n s t a n c e   i s   [ I d e n t i f i a b l e ] ( d o c : / / c o m . a p p l e . d o c u m e n t a t i o n / d o c u m e n t a t i o n / s w i f t / i d e n t i f i a b l e ) ,   y o u   d o n  t   n e e d   a n   ` i d `   [ p a r a m e t e r ] ( g l o s s a r y : / / p a r a m e t e r )   w h e n   c r e a t i n g   y o u r   g r i d   v i e w s .   I n s t e a d ,   S w i f t U I   u s e s   t h e   ` i d `   p r o p e r t y   o f   e a c h   ` i t e m `   t o   u n i q u e l y   i d e n t i f y   i t ._QTo initialize `GridItemView`, pass in the current `item` from the `ForEach` loop._2Explore how to add and edit photos in the gallery._Data model: Gather image URLs_„`AsyncImage` uses a placeholder to show some content while loading the image. The placeholder uses a SwiftUI [ProgressView](doc://com.apple.documentation/documentation/swiftui/progressview), which displays as a spinning circle._qThis walkthrough shows you how to create a grid of images, complete with photo-picking and -editing capabilities._±You can initialize an [AsyncImage](doc://com.apple.documentation/documentation/swiftui/asyncimage) with the `item.url` value to load the image [asynchronously](glossary://asynchronous%20process). Because you have many images to load when the app first launches, you can load them asynchronously to allow the app to keep running the rest of its code while it waits for the images to return. This prevents any noticable lag in your UI._zLearn how to put together a grid view using a series of SwiftUI built-in and [composed views](glossary://composed%20view)._iA `GridItemView` contains a property for `item`, which provides the URL to asynchronously load the image.o{ G r e a t !   N o w   y o u   h a v e   a   w a y   t o   m a r k   a n   i m a g e   a s   a   f a v o r i t e .   N e x t ,   y o u  l l   s h o w   a l l   o f   y o u r   f a v o r i t e d   i m a g e s   i n   t h e   ` G r i d V i e w ` ._FLearn how your app uses a data model to load and store all photo data._KExplore how to model a grid item using a [structure](glossary://structure)._¥```.buttonStyle(.plain)
.labelStyle(.iconOnly)
.padding(EdgeInsets(top: 20, leading: 30, bottom: 20, trailing: 30))
.background(Color.secondary.colorInvert())
.cornerRadius(15)
```]Model an itemo/ ` r e m o v e I t e m `   r e m o v e s   a n   e l e m e n t   b y   f i n d i n g   i t s   i n d e x   a n d   r e m o v i n g   i t   f r o m   t h e   ` i t e m s `   a r r a y .   T h e   m e t h o d   a l s o   r e m o v e s   t h e   e l e m e n t  s   c o r r e s p o n d i n g   i m a g e   f i l e   f r o m   t h e   D o c u m e n t s   d i r e c t o r y ,   i f   i t   e x i s t s   t h e r e .   T h i s   e n s u r e s   t h a t   t h e   i m a g e   w o n  t   r e l o a d   f r o m   l o c a l   a p p   s t o r a g e   t h e   n e x t   t i m e   y o u   l a u n c h   t h e   a p p ._fIf the image is a favorite, show a heart image over the bottom leading corner of the `Rectangle` view._Add an image to the gallery_JYou can use some conditional code to see whether this image is a favorite._AGive this a try on your own, using the following hints if needed.o* ` D a t a M o d e l `   i s   a n   [ o b s e r v a b l e   o b j e c t ] ( g l o s s a r y : / / o b s e r v a b l e % 2 0 o b j e c t )   t h a t   g a t h e r s   f i l e   U R L s   f r o m   i m a g e s   i n   y o u r   D o c u m e n t s   d i r e c t o r y   a s   w e l l   a s   f r o m   y o u r   a p p  s   [ b u n d l e ] ( g l o s s a r y : / / b u n d l e )   r e s o u r c e s .   I t   u s e s   t h e   U R L s   t o   p o p u l a t e   a n   a r r a y   o f   ` I t e m `   i n s t a n c e s   t h a t   d i s p l a y   a s   t h e   c o n t e n t   o f   y o u r   g r i d .o S i m i l a r l y ,   y o u  l l   l o a d   a l l   i m a g e   U R L s   f r o m   t h e   r e s o u r c e s   d i r e c t o r y   i n   t h e   a p p  s   m a i n   [ b u n d l e  s ] ( g l o s s a r y : / / b u n d l e )   a n d   a d d   t h e m   t o   ` i t e m s ` .   T h i s   b u n d l e   c o n t a i n s   a   d i r e c t o r y   o f   i m a g e s   t h a t   a r e   i n c l u d e d   w i t h   t h e   p r o j e c t ,   a s   o p p o s e d   t o   i m a g e s   t h a t   y o u   a d d e d   y o u r s e l f ._AX description for button_©```Button { 
    item.isFavorite.toggle()
} label: { 
    Label("Favorite", systemImage: item.isFavorite ? "heart.fill" : "heart")
        .font(.system(size: 24))
}
```oc T o   s h o w   y o u r   f a v o r i t e s   i n   ` G r i d V i e w ` ,   y o u  l l   o v e r l a y   a n   i m a g e   o f   a   h e a r t   o v e r   y o u r   f a v o r i t e   i m a g e s ._The [NavigationStack](doc://com.apple.documentation/documentation/swiftui/navigationstack) structure passes in the `DataModel` [instance](glossary://instance) using the `.environmentObject` modifier, making the [observable object](glossary://observable%20object) available to all of the [subviews views](glossary://subview) in the `NavigationStack`. As a result, those views can access the data from `dataModel` to perform various tasks, such as loading image views asynchronously or updating the grid view when the data changes._Add a new property to an item_Create a grid item_kWhen you use `ForEach` to construct a collection view, such as a list or grid, SwiftUI wants to uniquely identify each view so it can find and update them. To make this easier, you can create a model that [conforms](glossary://conform) to [Identifiable](doc://com.apple.documentation/documentation/swift/identifiable/), which creates an `id` property requirement._Favoriting your photosou I n   I m a g e   G a l l e r y ,   y o u  l l   l e a r n   h o w   t o   c r e a t e   a   g r i d   o f   i m a g e s ,   c o m p l e t e   w i t h   p h o t o - p i c k i n g   a n d   - e d i t i n g   c a p a b i l i t i e s .o4 I m a g e   G a l l e r y   l o a d s   a   g a l l e r y   o f   i m a g e s   w h e n   y o u   f i r s t   l a u n c h   t h e   a p p .   B e c a u s e   t h e   i m a g e s   a r e   s o   l a r g e ,   a n d   y o u   d o n  t   w a n t   t h e   a p p   t o   l a g   w h e n   l o a d i n g   t h e m   a l l   a t   t h e   s a m e   t i m e ,   y o u  l l   u s e   [ a s y n c h r o n o u s ] ( g l o s s a r y : / / a s y n c h r o n o u s % 2 0 p r o c e s s )   r e q u e s t s   t o   k e e p   t h e   a p p   r e s p o n s i v e   e v e n   w h e n   d a t a   r e t r i e v a l   i s   s l o w ._ÌYou can overlay yet another view on top of the `Rectangle` view by adding another `.overlay` modifier below the first. Using `.bottomLeading` for the `alignment` argument aligns the images at the bottom leading corner of the `Rectangle`._ìThe data for populating the grid comes from an array of `Item` instances (found in `dataModel.items`), each of which references a single image URL.o˘ L a r g e r   i m a g e s   c a n   l o a d   s l o w l y ,   w h i c h   c a n   c a u s e   n o t i c e a b l e   d e l a y s   w h e n   l o a d i n g   y o u r   a p p  s   U I .   T o   k e e p   y o u r   a p p   r e s p o n s i v e   d u r i n g   t h e   l o a d i n g   p r o c e s s ,   t h i s   w a l k t h r o u g h   f o c u s e s   o n   u n b l o c k i n g   d e l a y s   b y   s h o w i n g   p r o g r e s s   i n d i c a t o r s   u n t i l   e a c h   i m a g e   l o a d s .o∆ N e x t ,   y o u  l l   n e e d   t o   a d d   a   w a y   t o   m a r k   o n e   o f   y o u r   i m a g e s   a s   a   f a v o r i t e .   Y o u   c a n   d o   t h i s   b y   a d d i n g   a   ` B u t t o n `   t o   y o u r   ` D e t a i l V i e w `   t h a t   c a l l s   ` i t e m . i s F a v o r i t e . t o g g l e ( ) `   w h e n   s o m e o n e   t a p s   t h e   b u t t o n ._œ`Item` also has a `url` property that the app uses to identify the location of the corresponding image using a path to the file. `AsyncImage` uses this URL in `GridItemView` to asynchronously load the image.o^ ` G r i d V i e w `   i s   w h e r e   y o u  l l   c r e a t e   y o u r   i m a g e   g a l l e r y .   I f   y o u   n e e d   t o   r e v i e w   t h e   b a s i c s   o f   c r e a t i n g   a   g r i d ,   s e e   [ O r g a n i z i n g   w i t h   G r i d s ] ( x - c o m - a p p l e - p l a y g r o u n d s : / / p r o j e c t s ? c o n t e n t I d = c o m . a p p l e . p l a y g r o u n d s . o r g a n i z i n g w i t h g r i d s ) .   I n   t h i s   w a l k t h r o u g h ,   y o u  l l   l e a r n   h o w   t o   i m p l e m e n t   t h e   g r i d   u s i n g   a   m o d e l   t y p e ,   ` I t e m ` ,   a n d   a n   o b s e r v a b l e   o b j e c t ,   ` d a t a M o d e l ` ._TTo display all of the images as equally-sized squares in the grid, create a `Rectangle` view and set its aspect ratio to a value of `1`. This renders the rectangle with an equal width and length, creating a square. You can then overlay your image onto that square as a `GridItemView`, which scales to fill the available space of the square._√The `.toolbar` modifier contains two toolbar items: one to edit photos in the grid and one to add a new photo. These buttons toggle the state values `isEditing` and `isAddingPhoto`, respectively._…In `GridView`, each image is a `NavigationLink` with a [destination](glossary://destination%20view) of `DetailView` and a [label](glossary://label) of a `Rectangle` view overlaid with a `GridItemView`._(Add the `isFavorite` property to `Item`._Create your gallery_Creating the Grid^Share app data c∑d¿f±[πm√o≈!w»&âÁ	?	õ	˜
O
ü
˜Mü˝W°ÛCqªl¬p¬¸R©˘Iõ˙SûÙJ†9â€1ã¿j∏e√Z∑˚K° JûÓF•Z¨Vø{’#w√  q ¡!!a!õ!Â"="ñ"ı#K#ü#¯$B$†$%F%ú%Á&?&û&˜'O'£'Û(G(è(„)5)o)ø)“*&*r*¢,	,
,*,›-Ç.≥1;23ﬁ4[5b5…6â7L9à9û:g:{:´;P<a<Í>5@I@†B:BIB∂BƒD\ETFF,FåF†IDIxIËJwJ±N]N±NÊOOÏP`RRíR˛S˜T@TéUEUSWµXX<XâXÕ[%]9]U^^ `ﬂ`ˇabÉbúcâeıfÂg{ipjˇk—nëoÈpØq{q¶qºq–             ’              qﬂ